---
title: "Summarize data"
format:
  html:
    code-fold: true
    embed-resources: true
---

## Libraries etc

```{r}
#| warning: false
library(here)

library(data.table)
library(DT)

library(ggplot2)
library(rnaturalearth)
library(dplyr)

library(sf)

read_folder <- here("data/04_gis_info/data")
grid_folder <- here("data/03_grid")

fig_folder <- here("figures/preprocessing")
```

## Load data

```{r}
dat <- readRDS(file.path(read_folder, "french_odonate_data.rds"))
# Filtrage des données entre 1990 et 2018 inclus
dat <- dat[eventDate >= as.IDate("1990-01-01") & eventDate <= as.IDate("2018-12-31")]

dim(dat)
str(dat)
```

| Variable | Description |
|:-----------------------------------|:-----------------------------------|
| scientificName | latin name of the observed taxa |
| species | latin name of the species |
| genus | genus of the taxa |
| taxonRank | rank of the taxa |
| speciesID | ID of the species (from GBIF) |
| taxonID | ID of the taxa (from GBIF) |
| family | family name of the observed taxa |
| eventDate | date of the observation |
| recordedBy | name of the observer |
| decimalLongitude | longitude in decimal degree (WGS84) |
| decimalLatitude | latitude in decimal degree (WGS84) |
| x_ETRS89_LAEA | longitude in meter following the ETRS89 coordinate reference system and the Lambert Azimuthal Equal-Area projection |
| y_ETRS89_LAEA | latitude in meter following the ETRS89 coordinate reference system and the Lambert Azimuthal Equal-Area projection |
| source | database of origin (steli or atlas) |
| occurrenceID | ID of the occurence event (unique ID of the row) (to check) |
| recordedBy | ID of the observer |
| verbatimName | name of the species as indicated in the original table |
| modifiedName | name of the species modified from the original table, used for backbone check against GBIF taxonomy |
| id_1000 | ID of the grid cell at 1km resolution |
| id_5000 | ID of the grid cell at 5km resolution |
| id_10000 | ID of the grid cell at 10km resolution |
| id_ses | ID of the observation session (STELI only) |
| id_site | ID of the observation site (STELI only) |
| region | administrative region of the observation |
| departement | administrative department of the observation |
| municipality | municipality of the observation |
| elevation_m | elevation (in m), from [Copernicus GLO-30 dataset](https://dataspace.copernicus.eu/explore-data/data-collections/copernicus-contributing-missions/collections-description/COP-DEM) |
| GEnS_v3_bioclim | bioclimatic region, from [Metzger et al. 2013](https://doi.org/10.1111/geb.12022) |
| popdensity_hab_per_km2 | population density in 2010 from [JRC GHS-POP R2023A dataset](https://data.jrc.ec.europa.eu/dataset/2ff68a52-5b5b-4a22-8f40-c41da8332cfe) |
| CLC2018_landcover | [Corine land cover class](https://land.copernicus.eu/en/products/corine-land-cover/clc2018) of 2018 with spatial resolution of 100m |

## Summarize data

### Tables

```{r}
# Number of observations by program
dat[, .N, by = source] |>
  datatable()

# Number of species
nsp <- dat[, .N, by = scientificName][order(-N), ]

nsp |> datatable()
```

## Species taxonomy

```{r, fig.height=6, fig.width=8}
ggplot(nsp) +
  geom_col(aes(x = N, y = reorder(scientificName, N)), fill = "darkorange") +
  scale_x_continuous(expand = c(0, 0)) +
  xlab("Number of occurrences") +
  theme_minimal(base_size = 16) +
  theme(
    axis.title.y = element_blank(),
    panel.grid.major.y = element_blank(),
    axis.text.y = element_text(face = "italic", size = 6)
  )

ggsave(
  file.path(fig_folder, "spp_barplot.png"),
  width = 8,
  height = 6,
  dpi = 300
)
```

```{r}
dat_sp_src <- dat[taxonRank == "SPECIES", ]
dat_sp_src <- unique(dat_sp_src[, ntot := .N, 
                  by = source][, .(scientificName, source, ntot)])
dat_sp_src[, `:=`(n = .N, prop = .N/ntot), 
           by = c("scientificName", "source")]

dat_sp_src |> 
  tidyr::pivot_wider(names_from = source,
                     values_from = prop,
                     id_cols = scientificName, 
                     values_fill = 0) |> 
  DT::datatable()
```


### Data evolution

```{r, fig.width=6, fig.height=3}
datN <- dat[, .N, by = list(source, year(dat$eventDate))]

ggplot(datN) +
  geom_line(aes(x = year, y = N)) +
  # geom_point(aes(x = year, y = N)) +
  theme_minimal() +
  ylab("Occurrences") +
  scale_y_continuous(labels = function(x) format(x, big.mark = ",")) +
  # scale_x_continuous(breaks = c(seq(1700, 1900, by = 100),
  #                               seq(1990, 2024, by = 10))) +
  # # scale_x_continuous(breaks = seq(2010, 2025, by = 5)) +
  facet_wrap(facets = vars(source), scales = "free") +
  theme(axis.title.x = element_blank())

ggsave(
  file.path(fig_folder, "dat_evolution.png"),
  width = 6,
  height = 3,
  dpi = 300
)
```

### Map

```{r}
dat_sf <- st_as_sf(dat, coords = c("x_ETRS89_LAEA", "y_ETRS89_LAEA"))
st_crs(dat_sf) <- 3035

# Data bounding box
bbox <- st_bbox(dat_sf)
```

Plot raw data points:

```{r}
# Get French map
fr <- ne_countries(scale = 50, country = "France")
fr_3035 <- st_transform(fr, 3035)
```

```{r}
#| eval: false
ggplot() +
  geom_sf(data = fr_3035) +
  xlim(bbox$xmin, bbox$xmax) +
  ylim(bbox$ymin, bbox$ymax) +
  geom_sf(data = dat_sf, aes(col = source), size = 0.1) +
  facet_wrap(facets = vars(source))
```

Plot data on grid:

```{r}
# Get grid
grid <- readRDS(file.path(grid_folder, "grid_scale_10000.rds"))
```

```{r}
# Sumarize with grid
nobs <- st_drop_geometry(dat) |>
  group_by(id_10000) |>
  summarize(nobs = n(), .groups = "drop")

nobs_grid <- grid |>
  right_join(nobs, by = c("id" = "id_10000"))
```

```{r}
# Plot data
ggplot() +
  geom_sf(data = fr_3035) +
  geom_sf(data = nobs_grid, aes(fill = nobs), color = "transparent") +
  xlim(bbox$xmin, bbox$xmax) +
  ylim(bbox$ymin, bbox$ymax) +
  scale_fill_viridis_c(
    na.value = "lightgrey",
    trans = "log",
    breaks = c(1, 20, 400, 8000),
    name = "Occurrences"
  ) +
  theme_void(base_size = 30) +
  theme(
    legend.position = "left",
    legend.key.height = unit(1, "cm"),      # Hauteur des cases de légende
    legend.key.width  = unit(1, "cm"),      # Largeur des cases
    legend.text = element_text(size = 16),    # Taille du texte
    legend.title = element_text(size = 20)    # Taille du titre
  )

ggsave(file.path(fig_folder, "map.png"), width = 8, height = 6, dpi = 300)
```
