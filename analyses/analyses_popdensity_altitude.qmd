---
title: "analyses_popdensity_altitude"
format:
  html:
    number-sections: true
    embed-resources: true
editor: visual
---

## Bibliothèques, chemins, chargement des données

```{r}
# Bibliothèques
#| warning: false
library(here)
library(data.table)
library(DT)
library(ggplot2)
library(rnaturalearth)
library(dplyr)
library(terra)
library(sf)

# Chemins
read_folder <- here("data/03_grid")
gisdata_folder <- here("data/gis")
fig_folder <- here("figures/rapport_stage_M1_TMP")

# Chargement et filtrage des données observées
dat <- readRDS(file.path(read_folder, "french_odonate_data.rds"))
dat <- dat[!is.na(popdensity_hab_per_km2) & !is.na(elevation_m) & popdensity_hab_per_km2 >= 0 & elevation_m >= 0]
dat <- dat[eventDate >= as.IDate("1990-01-01") & eventDate <= as.IDate("2018-12-31")]
```

# Analyse du biais spatial d'échantillonnage lié à la densité de population

Les données de densité de population sont tirées des estimations du Joint Research Centre (JRC) Data Catalogue, pour 2010, avec une résolution spatiale de 1 km. Les valeurs sont en nombre d'habitants par km².

### Distribution attendue

```{r}
# Chargement et filtrage des données 
pop_exp <- read.csv(file.path(read_folder, "pop_density.csv"), check.names = TRUE)
pop_exp <- pop_exp[!is.na(pop_exp$value) & pop_exp$value >= 0, ]

# Les données sont agrégées, créer un dt vecteur avec les données individuelles
pop_exp_indiv <- rep(pop_exp$value, times = pop_exp$area)
pop_exp_dt <- data.table(pop = pop_exp_indiv)

# Statistiques descriptives
pop_exp_stats <- pop_exp_dt[, .(
  min    = min(pop),
  median = median(pop),
  mean   = mean(pop),
  max    = max(pop),
  sd     = sd(pop)
)]
pop_exp_stats |> data.table()

# Visualisation
ggplot(pop_exp_dt, aes(x = pop)) +
  geom_histogram(bins = 100, fill = "steelblue", alpha = 0.7) +
  labs(title = "Densité de population attendue",
       x = "Densité (hab/km²)", y = "Nombre de pixels") + xlim(-1,750) +
  theme_minimal()
ggplot(pop_exp_dt, aes(x = pop)) +
  geom_histogram(bins = 100, fill = "steelblue", alpha = 0.7) +
  scale_x_continuous(trans = "log1p") +
  labs(title = "Densité de population attendue",
       x = "Densité (hab/km²)", y = "Nombre de pixels") +
  theme_minimal()
```

### Distribution observée

```{r}
# Statistiques descriptives
pop_obs_stats <- dat[, .(
  min    = min(popdensity_hab_per_km2),
  median = median(popdensity_hab_per_km2),
  mean   = mean(popdensity_hab_per_km2),
  max    = max(popdensity_hab_per_km2),
  sd     = sd(popdensity_hab_per_km2)
)]
pop_obs_stats |> data.table()

# Visualisation
ggplot(dat, aes(x = popdensity_hab_per_km2)) +
  geom_histogram(bins = 100, fill = "steelblue", alpha = 0.7) +
  scale_x_continuous() + 
  labs(title = "Densité de population observée",
       x = "Densité (hab/km²)", y = "Nombre d'observations") + xlim(-1,750)
ggplot(dat, aes(x = popdensity_hab_per_km2)) +
  geom_histogram(bins = 100, fill = "steelblue", alpha = 0.7) +
  scale_x_continuous(trans = "log1p") + 
  labs(title = "Densité de population observée",
       x = "Densité (hab/km²)", y = "Nombre d'observations")
```

### Comparaison des distributions observée et attendue

```{r}
# Joindre les distributions obs et exp dans un format long
pop_comp <- rbindlist(list(
  data.table(source = "attendue", pop = pop_exp_indiv),
  data.table(source = "observée", pop = dat$popdensity_hab_per_km2)
))

# Statistiques par groupe
pop_comp[, .(
  moyenne = mean(pop),
  médiane = median(pop),
  sd = sd(pop)
), by = source]

# Visualisation
ggplot(pop_comp, aes(x = pop, fill = source)) +
  geom_density(alpha = 0.5) +
  scale_x_continuous() +
  labs(title = "Distribution des densités de population",
       x = "densité de population hab/km²)", y = "Densité") + xlim(-1,100) +
  theme_minimal()
ggplot(pop_comp, aes(x = pop, fill = source)) +
  geom_density(alpha = 0.5) +
  scale_x_continuous(
    trans = "log1p",
    breaks = c(0, 1, 10, 100, 1000, 10000),
    labels = scales::comma_format()
  ) +
  labs(
    x = "Densité de population (hab/km², échelle log1p)",
    y = "Densité estimée",
    fill = "Distribution"
  ) +
  theme_minimal(base_size = 14) +
  theme(plot.title = element_blank())

# Sauvegarder la figure (sans titre)
ggsave(file.path(fig_folder, "distribpopdensity.png"), width = 8, height = 6, dpi = 300)
```

```{r}
# Test de Kolmogorov-Smirnov
ks.test(dat$popdensity_hab_per_km2, pop_exp_indiv)
# Comparaison visuelle des distributions cumulées
ggplot(pop_comp, aes(x = pop, color = source)) +
  stat_ecdf(geom = "step") +
  labs(title = "Fonctions de répartition cumulées (ECDF)",
       x = "Densité de population (hab/km²))", y = "F(x)") + xlim(0,6000) +
  theme_minimal()
```

Il y a donc une différence significative de taille modérée entre les distributions de densité de populations observée et attendue (D = 0.14721, p < 2.2e-16). Ceci confirme donc un biais spatial d'échantillonnage lié à la densité de population dans les données d'occurences d'odonates. Dans les données observées, il y a une sur-représentaion des zones plus densément peuplées (moy obs = 254,1 hab/km², moy exp = 113,0 hab/km²) et une sous-représentation des zones peu densément peuplées (méd obs = 19, méd exp = 30).






# Analyse du biais spatial d'échantillonnage lié à l'altitude

### Distribution attendue

```{r}
# Chargement des données 
alt_exp <- read.csv(file.path(read_folder, "elevation_density.csv"), check.names = TRUE)
# Les données sont agrégées, créer un dt avec les données individuelles
alt_exp_indiv <- rep(alt_exp$value, times = alt_exp$area)
alt_exp_dt <- data.table(alt = alt_exp_indiv)

# Statistiques descriptives
alt_exp_stats <- alt_exp_dt[, .(
  min    = min(alt),
  median = median(alt),
  mean   = mean(alt),
  max    = max(alt),
  sd     = sd(alt)
)]
alt_exp_stats |> data.table()

# Visualisation
ggplot(alt_exp_dt, aes(x = alt)) +
  geom_histogram(bins = 100, fill = "steelblue", alpha = 0.7) +
  scale_x_continuous() +
  labs(title = "Distribution attendue de l'altitude",
       x = "Altitude (m)") +
  theme_minimal()
ggplot(alt_exp_dt[alt > 0], aes(x = alt)) +
  geom_histogram(bins = 100, fill = "steelblue", alpha = 0.7) +
  scale_x_log10() +
  labs(title = "Distribution attendue de l'altitude",
       x = "Altitude (m) (log10)") +
  theme_minimal()
ggplot(alt_exp_dt, aes(x = alt)) +
  geom_histogram(bins = 100, fill = "steelblue", alpha = 0.7) +
  scale_y_log10() +
  labs(title = "Distribution attendue de l'altitude (axe Y en log10)",
       x = "Altitude (m)", y = "Nombre de pixels (log10)") +
  theme_minimal()
```

### Distribution observée

```{r}
# Statistiques descriptives
alt_obs_stats <- dat[, .(
  min    = min(elevation_m),
  median = median(elevation_m),
  mean   = mean(elevation_m),
  max    = max(elevation_m),
  sd     = sd(elevation_m)
)]
alt_obs_stats |> data.table()

# Visualisation
ggplot(dat, aes(x = elevation_m)) +
  geom_histogram(bins = 100, fill = "steelblue", alpha = 0.7) +
  scale_x_continuous() + 
  labs(title = "Altitude observée",
       x = "Altitude (m)", y = "Nombre d'observations") +
  theme_minimal()
ggplot(dat[elevation_m > 0], aes(x = elevation_m)) +
  geom_histogram(bins = 100, fill = "steelblue") +
  scale_x_log10() +
  labs(title = "Altitude observée (log10)",
       x = "Altitude (m)", y = "Nombre d'observations") +
  theme_minimal()
ggplot(dat, aes(x = elevation_m)) +
  geom_histogram(bins = 100, fill = "steelblue", alpha = 0.7) +
  scale_y_log10() +
  labs(title = "Altitude observée (axe Y en log10)",
       x = "Altitude (m)", y = "Nombre d'observations (log10)") +
  theme_minimal()
```

### Comparaison des distributions observée et attendue

```{r}
# Joindre les distributions obs et exp dans un format long
alt_comp <- rbindlist(list(
  data.table(source = "alt_exp", alt = alt_exp_indiv),
  data.table(source = "alt_obs", alt = dat$elevation_m)
))

# Statistiques par groupe
alt_comp[, .(
  moyenne = mean(alt),
  médiane = median(alt),
  sd = sd(alt)
), by = source]

# Visualisation
ggplot(alt_comp, aes(x = alt, fill = source)) +
  geom_density(alpha = 0.5) +
  scale_x_continuous() +
  labs(title = "Distribution de l'altitude",
       x = "Altitude (m)", y = "Densité") +
  theme_minimal()
ggplot(alt_comp, aes(x = alt, fill = source)) +
  geom_density(alpha = 0.5) +
  scale_x_continuous(
    trans = "log1p",
    limits = c(0, NA),
    breaks = c(0, 50, 200, 1000, 3000),
    labels = scales::comma_format()
  ) +
  scale_fill_manual(
    values = c("alt_obs" = "#00BFC4", "alt_exp" = "#F8766D"),
    labels = c("alt_obs" = "Observée", "alt_exp" = "Attendue")
  ) +
  labs(
    x = "Altitude (m, échelle log1p)",
    y = "Densité estimée",
    fill = "Distribution"
  ) +
  theme_minimal(base_size = 14) +
  theme(plot.title = element_blank())

# Sauvegarder la figure log1p (sans titre)
ggsave(file.path(fig_folder, "distribaltitude.png"), width = 8, height = 6, dpi = 300)
```

```{r}
# Test de Kolmogorov-Smirnov
ks.test(dat$elevation_m, alt_exp_indiv)
# Comparaison visuelle des distributions cumulées
ggplot(pop_comp, aes(x = pop, color = source)) +
  stat_ecdf(geom = "step") +
  labs(title = "Fonctions de répartition cumulées (ECDF)",
       x = "Altitude (m)", y = "F(x)") + xlim(0,3000) +
  theme_minimal()
```

Il y a donc une différence significative de taille modérée entre les distributions d'altitude observée et attendue (D = 0.1189, p < 2.2e-16). Ceci confirme donc un biais spatial d'échantillonnage lié à l'altitude dans les données d'occurences d'odonates. Les zones de haute altitude sont sous-échantillonnées tandis que les zones de basse altitude sont sur-échantillonnées.
Dans les données observées, il y a une sous-représentaion des zones de haute altitude (moy obs = 278.8 m, moy exp = 340.9 m) et une sur-représentation des zones de basse altitude (méd obs = 155.4 m, méd exp =  195 m).
