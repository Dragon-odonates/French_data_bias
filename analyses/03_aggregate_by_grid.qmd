---
title: "Summarize data"
format:
  html:
    code-fold: true
    embed-resources: true
---

## Libraries etc

```{r}
#| warning: false
library(here)

library(data.table)
library(DT)

library(ggplot2)
library(rnaturalearth)
library(tidyr)
library(dplyr)

library(sf)

read_folder <- here("data/03_grid")
write_folder <- here("data/04_aggregate_by_grid")
```

## Load data

```{r}
dat <- readRDS(file.path(read_folder, "french_odonate_data.rds"))
# Filtrage des données entre 1990 et 2020 inclus
dat <- dat[eventDate >= as.IDate("1990-01-01") & eventDate <= as.IDate("2020-12-31")]
summary(dat$eventDate)
```

## Convert landcover groups

```{r}
dat[, landcover_groups := fcase(
  CLC2018_landcover %in% c("Continuous urban fabric", "Discontinuous urban fabric", "Industrial or commercial units", "Road and rail networks and associated land", "Port areas", "Airports", "Mineral extraction sites", "Dump sites", "Construction sites", "Green urban areas", "Sport and leisure facilities"),
  "Zones urbanisées et artificielles",

  CLC2018_landcover %in% c("Non-irrigated arable land", "Permanently irrigated land", "Rice fields", "Vineyards", "Fruit trees and berry plantations", "Olive groves"),
  "Zones agricoles intensives",

  CLC2018_landcover %in% c("Annual crops associated with permanent crops", "Complex cultivation patterns", "Land principally occupied by agriculture, with significant areas of natural vegetation", "Agro-forestry areas"),
  "Zones agricoles semi-naturelles",

  CLC2018_landcover %in% c("Broad-leaved forest", "Coniferous forest", "Mixed forest"),
  "Forêts",

  CLC2018_landcover %in% c("Pastures", "Natural grasslands", "Moors and heathland", "Sclerophyllous vegetation", "Transitional woodland-shrub"),
  "Milieux ouverts semi-naturels",
  
  CLC2018_landcover %in% c("Inland marshes", "Peat bogs",  "Water courses", "Water bodies", "Salt marshes", "Salines", "Intertidal flats"),
  "Milieux aquatiques",
  
  CLC2018_landcover %in% c("Coastal lagoons", "Estuaries", "Sea and ocean", "Beaches, dunes, sands", "Bare rocks", "Sparsely vegetated areas", "Burnt areas", "Glaciers and perpetual snow"),
  "Autres",

  default = "NODATA"
)]
```

## Pivot landcover and bioclimatic variables

```{r}
# Add easier names for landcover classes and bioclim (easier to convert to column names later)
dat[, CLC_names := fcase(
  landcover_groups == "Zones urbanisées et artificielles",
  "CLC_urban",
  landcover_groups == "Zones agricoles intensives",
  "CLC_agri_intensive",
  landcover_groups == "Zones agricoles semi-naturelles",
  "CLC_agri_seminat",
  landcover_groups == "Forêts",
  "CLC_forest",
  landcover_groups == "Milieux ouverts semi-naturels",
  "CLC_open_seminat",
  landcover_groups == "Milieux aquatiques",
  "CLC_aquatic"
)]

dat[, bioclim_names := fcase(
  GEnS_v3_bioclim == "E. Cold and wet",
  "bioclim_E_cold_wet",
  GEnS_v3_bioclim == "F. Extremely cold and mesic",
  "bioclim_F_cold_extreme_mesic",
  GEnS_v3_bioclim == "G. Cold and mesic",
  "bioclim_G_cold_mesic",
  GEnS_v3_bioclim == "H. Cool temperate and dry",
  "bioclim_H_cool_dry",
  GEnS_v3_bioclim == "I. Cool temperate and xeric",
  "bioclim_I_cool_xeric",
  GEnS_v3_bioclim == "J. Cool temperate and moist",
  "bioclim_J_cool_moist",
  GEnS_v3_bioclim == "K. Warm temperate and mesic",
  "bioclim_K_warm_mesic",
  GEnS_v3_bioclim == "L. Warm temperate and xeric",
  "bioclim_L_warm_xeric",
  is.na(GEnS_v3_bioclim),
  "bioclim_NODATA"
)]
```


```{r}
# Pivot wider (column CLC names -> many columns)
dat_wide <- dat |> 
  pivot_wider(names_from = CLC_names,
              values_from = CLC_names,
              values_fn = ~ 1,
              values_fill = 0)

# Convert back to data.table
dat_wide <- as.data.table(dat_wide)

# Remove older columns
dat_wide[, `:=`(CLC2018_landcover = NULL, 
                landcover_groups = NULL)]
```

```{r}
# Pivot wider (column bioclim names -> many columns)
dat_wide <- dat_wide |> 
  pivot_wider(names_from = bioclim_names,
              values_from = bioclim_names,
              values_fn = ~ 1,
              values_fill = 0)

# Convert back to data.table
dat_wide <- as.data.table(dat_wide)

# Remove older columns
dat_wide[, GEnS_v3_bioclim := NULL]
```


## Summarize data by grid

```{r}
# Choose scale
grid_id <- "id_10000"

# Select CLC and bioclim columns
clc_bioclim <- grep("CLC_|bioclim_", colnames(dat_wide),
                    value = TRUE)

# Add percentages for CLC and bioclim
dat_wide[, c(clc_bioclim) := lapply(.SD, function(x) sum(x)/.N), 
         by = grid_id,
         .SDcols = clc_bioclim]

# Add mean elevation/pop. density
dat_wide[, `:=`(elevation_m = mean(elevation_m, 
                                   na.rm = TRUE),
                popdensity_hab_per_km2 = mean(popdensity_hab_per_km2, 
                                              na.rm = TRUE)),
         by = grid_id]

# Add number of obs
dat_wide[, nobs := .N, by = grid_id]
```


```{r}
# Collapse values by grid_id

# Get columns we should keep
cols_keep <- c(grid_id,
               "nobs",
               clc_bioclim,
               "elevation_m",
               "popdensity_hab_per_km2")
dat_grid <- unique(dat_wide[, ..cols_keep])
```


```{r}
# Check percentages sum to 1
clc_cols <- grep("CLC_", colnames(dat_grid),
                 value = TRUE)
chk_clc <- rowSums(dat_grid[, .SD, .SDcols = clc_cols])
any(abs(chk_clc - 1) > 1e-10) # Should be FALSE

bioclim_cols <- grep("bioclim_", colnames(dat_grid),
                     value = TRUE)
chk_bioclim <- rowSums(dat_grid[, .SD, .SDcols = bioclim_cols])
any(abs(chk_bioclim - 1) > 1e-10) # Should be FALSE
```
## Add main class

```{r}
# Get main CLC (break ties by randomly selecting one)
main_clc <- apply(dat_grid[, ..clc_cols], 1, 
                  function(x) {
                    nam <- names(which(x == max(x)))
                    sample(nam, 1)
                  })

# Get main biclim
main_bioclim <- apply(dat_grid[, ..bioclim_cols], 1, 
                  function(x) {
                    nam <- names(which(x == max(x)))
                    sample(nam, 1)
                  })

dat_grid[, `:=`(main_clc = main_clc,
                main_bioclim = main_bioclim)]
```



## Plot

```{r}
ggplot(dat_grid) +
  geom_histogram(aes(x = elevation_m))

ggplot(dat_grid) +
  geom_histogram(aes(x = popdensity_hab_per_km2))

ggplot(dat_grid) +
  geom_bar(aes(y = main_bioclim))
ggplot(dat_grid) +
  geom_bar(aes(y = main_clc))
```

```{r}
# Read grid (nb choose the right grid scale)
grid <- readRDS(file.path(read_folder, 
                          "grid_scale_10000.rds"))

# Add spatial grid
dat_grid_sf <- grid |>
  right_join(dat_grid, by = c("id" = grid_id))

# Data bounding box
bbox <- st_bbox(dat_grid_sf)
```

```{r}
# Get French map
fr <- ne_countries(scale = 50, 
                   country = "France")
fr_3035 <- st_transform(fr, 3035)
```

```{r}
# Check spatial patterns

ggplot() +
  geom_sf(data = dat_grid_sf, aes(fill = elevation_m),
          color = "transparent") +
  geom_sf(data = fr_3035, fill = "transparent") +
  xlim(bbox$xmin, bbox$xmax) +
  ylim(bbox$ymin, bbox$ymax) +
  scale_fill_viridis_c(na.value = "lightgrey",
                       name = "Elevation") +
  theme_void() + 
  theme(legend.position = "left",
        legend.key.height = unit(1, "cm"))

ggplot() +
  geom_sf(data = dat_grid_sf, aes(fill = popdensity_hab_per_km2),
          color = "transparent") +
  geom_sf(data = fr_3035, fill = "transparent") +
  xlim(bbox$xmin, bbox$xmax) +
  ylim(bbox$ymin, bbox$ymax) +
  scale_fill_viridis_c(na.value = "lightgrey",
                       name = "Pop. density") +
  theme_void() + 
  theme(legend.position = "left",
        legend.key.height = unit(1, "cm"))
# Seems okay

ggplot() +
  geom_sf(data = dat_grid_sf, aes(fill = main_bioclim),
          color = "transparent") +
  geom_sf(data = fr_3035, fill = "transparent") +
  xlim(bbox$xmin, bbox$xmax) +
  ylim(bbox$ymin, bbox$ymax) +
  scale_fill_viridis_d(na.value = "lightgrey",
                       name = "Bioclim class") +
  theme_void() + 
  theme(legend.position = "left",
        legend.key.height = unit(1, "cm"))
```


```{r}
# Save data
saveRDS(dat_grid, 
        file = file.path(write_folder, "dat_aggregated_10000.rds"))
```

